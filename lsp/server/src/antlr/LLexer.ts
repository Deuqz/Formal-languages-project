// Generated from grammar/LLexer.g4 by ANTLR 4.7.3-SNAPSHOT


import { ATN } from "antlr4ts/atn/ATN";
import { ATNDeserializer } from "antlr4ts/atn/ATNDeserializer";
import { CharStream } from "antlr4ts/CharStream";
import { Lexer } from "antlr4ts/Lexer";
import { LexerATNSimulator } from "antlr4ts/atn/LexerATNSimulator";
import { NotNull } from "antlr4ts/Decorators";
import { Override } from "antlr4ts/Decorators";
import { RuleContext } from "antlr4ts/RuleContext";
import { Vocabulary } from "antlr4ts/Vocabulary";
import { VocabularyImpl } from "antlr4ts/VocabularyImpl";

import * as Utils from "antlr4ts/misc/Utils";


export class LLexer extends Lexer {
	public static readonly FUN = 1;
	public static readonly IF = 2;
	public static readonly ELSE = 3;
	public static readonly WHILE = 4;
	public static readonly S = 5;
	public static readonly NAME = 6;
	public static readonly INT = 7;
	public static readonly STR = 8;
	public static readonly WS = 9;
	public static readonly ACLOSE = 10;
	public static readonly AOPEN = 11;
	public static readonly BRCLOSE = 12;
	public static readonly BROPEN = 13;
	public static readonly COMMA = 14;
	public static readonly DOT = 15;
	public static readonly MULT = 16;
	public static readonly MOD = 17;
	public static readonly DIV = 18;
	public static readonly ADD = 19;
	public static readonly SUB = 20;
	public static readonly INCR = 21;
	public static readonly DECR = 22;
	public static readonly CONJ = 23;
	public static readonly DISJ = 24;
	public static readonly EXCL = 25;
	public static readonly COLON = 26;
	public static readonly SEMICOLON = 27;
	public static readonly ASSIGNMENT = 28;
	public static readonly ADD_ASSIGNMENT = 29;
	public static readonly SUB_ASSIGNMENT = 30;
	public static readonly MULT_ASSIGNMENT = 31;
	public static readonly DIV_ASSIGNMENT = 32;
	public static readonly MOD_ASSIGNMENT = 33;
	public static readonly ARROW = 34;
	public static readonly DOUBLE_ARROW = 35;
	public static readonly RANGE = 36;
	public static readonly COLONCOLON = 37;
	public static readonly Q_COLONCOLON = 38;
	public static readonly DOUBLE_SEMICOLON = 39;
	public static readonly HASH = 40;
	public static readonly AT = 41;
	public static readonly QUEST = 42;
	public static readonly ELVIS = 43;
	public static readonly LANGLE = 44;
	public static readonly RANGLE = 45;
	public static readonly LE = 46;
	public static readonly GE = 47;
	public static readonly EXCL_EQ = 48;
	public static readonly EXCL_EQEQ = 49;
	public static readonly AS_SAFE = 50;
	public static readonly EQEQ = 51;
	public static readonly EQEQEQ = 52;
	public static readonly SINGLE_QUOTE = 53;
	public static readonly ST = 54;

	// tslint:disable:no-trailing-whitespace
	public static readonly channelNames: string[] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN",
	];

	// tslint:disable:no-trailing-whitespace
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE",
	];

	public static readonly ruleNames: string[] = [
		"FUN", "IF", "ELSE", "WHILE", "S", "NAME", "INT", "STR", "WS", "ACLOSE", 
		"AOPEN", "BRCLOSE", "BROPEN", "COMMA", "DOT", "MULT", "MOD", "DIV", "ADD", 
		"SUB", "INCR", "DECR", "CONJ", "DISJ", "EXCL", "COLON", "SEMICOLON", "ASSIGNMENT", 
		"ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", "DIV_ASSIGNMENT", 
		"MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", "RANGE", "COLONCOLON", "Q_COLONCOLON", 
		"DOUBLE_SEMICOLON", "HASH", "AT", "QUEST", "ELVIS", "LANGLE", "RANGLE", 
		"LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", "EQEQ", "EQEQEQ", "SINGLE_QUOTE", 
		"ST",
	];

	private static readonly _LITERAL_NAMES: Array<string | undefined> = [
		undefined, "'fun'", "'if'", "'else'", "'while'", "'skip'", undefined, 
		undefined, undefined, undefined, "'}'", "'{'", "')'", "'('", "','", "'.'", 
		"'*'", "'%'", "'/'", "'+'", "'-'", "'++'", "'--'", "'&&'", "'||'", "'!'", 
		"':'", "';'", "'='", "'+='", "'-='", "'*='", "'/='", "'%='", "'->'", "'=>'", 
		"'..'", "'::'", "'?::'", "';;'", "'#'", "'@'", "'?'", "'?:'", "'<'", "'>'", 
		"'<='", "'>='", "'!='", "'!=='", "'as?'", "'=='", "'==='", "'''", "'^'",
	];
	private static readonly _SYMBOLIC_NAMES: Array<string | undefined> = [
		undefined, "FUN", "IF", "ELSE", "WHILE", "S", "NAME", "INT", "STR", "WS", 
		"ACLOSE", "AOPEN", "BRCLOSE", "BROPEN", "COMMA", "DOT", "MULT", "MOD", 
		"DIV", "ADD", "SUB", "INCR", "DECR", "CONJ", "DISJ", "EXCL", "COLON", 
		"SEMICOLON", "ASSIGNMENT", "ADD_ASSIGNMENT", "SUB_ASSIGNMENT", "MULT_ASSIGNMENT", 
		"DIV_ASSIGNMENT", "MOD_ASSIGNMENT", "ARROW", "DOUBLE_ARROW", "RANGE", 
		"COLONCOLON", "Q_COLONCOLON", "DOUBLE_SEMICOLON", "HASH", "AT", "QUEST", 
		"ELVIS", "LANGLE", "RANGLE", "LE", "GE", "EXCL_EQ", "EXCL_EQEQ", "AS_SAFE", 
		"EQEQ", "EQEQEQ", "SINGLE_QUOTE", "ST",
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(LLexer._LITERAL_NAMES, LLexer._SYMBOLIC_NAMES, []);

	// @Override
	// @NotNull
	public get vocabulary(): Vocabulary {
		return LLexer.VOCABULARY;
	}
	// tslint:enable:no-trailing-whitespace


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(LLexer._ATN, this);
	}

	// @Override
	public get grammarFileName(): string { return "LLexer.g4"; }

	// @Override
	public get ruleNames(): string[] { return LLexer.ruleNames; }

	// @Override
	public get serializedATN(): string { return LLexer._serializedATN; }

	// @Override
	public get channelNames(): string[] { return LLexer.channelNames; }

	// @Override
	public get modeNames(): string[] { return LLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uC91D\uCABA\u058D\uAFBA\u4F53\u0607\uEA8B\uC241\x028\u0117\b\x01" +
		"\x04\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06" +
		"\x04\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r" +
		"\t\r\x04\x0E\t\x0E\x04\x0F\t\x0F\x04\x10\t\x10\x04\x11\t\x11\x04\x12\t" +
		"\x12\x04\x13\t\x13\x04\x14\t\x14\x04\x15\t\x15\x04\x16\t\x16\x04\x17\t" +
		"\x17\x04\x18\t\x18\x04\x19\t\x19\x04\x1A\t\x1A\x04\x1B\t\x1B\x04\x1C\t" +
		"\x1C\x04\x1D\t\x1D\x04\x1E\t\x1E\x04\x1F\t\x1F\x04 \t \x04!\t!\x04\"\t" +
		"\"\x04#\t#\x04$\t$\x04%\t%\x04&\t&\x04\'\t\'\x04(\t(\x04)\t)\x04*\t*\x04" +
		"+\t+\x04,\t,\x04-\t-\x04.\t.\x04/\t/\x040\t0\x041\t1\x042\t2\x043\t3\x04" +
		"4\t4\x045\t5\x046\t6\x047\t7\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03" +
		"\x03\x03\x03\x03\x04\x03\x04\x03\x04\x03\x04\x03\x04\x03\x05\x03\x05\x03" +
		"\x05\x03\x05\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03" +
		"\x07\x03\x07\x07\x07\x89\n\x07\f\x07\x0E\x07\x8C\v\x07\x03\b\x06\b\x8F" +
		"\n\b\r\b\x0E\b\x90\x03\t\x03\t\x07\t\x95\n\t\f\t\x0E\t\x98\v\t\x03\t\x03" +
		"\t\x03\n\x06\n\x9D\n\n\r\n\x0E\n\x9E\x03\n\x03\n\x03\v\x03\v\x03\f\x03" +
		"\f\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0F\x03\x0F\x03\x10\x03\x10\x03\x11" +
		"\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15" +
		"\x03\x16\x03\x16\x03\x16\x03\x17\x03\x17\x03\x17\x03\x18\x03\x18\x03\x18" +
		"\x03\x19\x03\x19\x03\x19\x03\x1A\x03\x1A\x03\x1B\x03\x1B\x03\x1C\x03\x1C" +
		"\x03\x1D\x03\x1D\x03\x1E\x03\x1E\x03\x1E\x03\x1F\x03\x1F\x03\x1F\x03 " +
		"\x03 \x03 \x03!\x03!\x03!\x03\"\x03\"\x03\"\x03#\x03#\x03#\x03$\x03$\x03" +
		"$\x03%\x03%\x03%\x03&\x03&\x03&\x03\'\x03\'\x03\'\x03\'\x03(\x03(\x03" +
		"(\x03)\x03)\x03*\x03*\x03+\x03+\x03,\x03,\x03,\x03-\x03-\x03.\x03.\x03" +
		"/\x03/\x03/\x030\x030\x030\x031\x031\x031\x032\x032\x032\x032\x033\x03" +
		"3\x033\x033\x034\x034\x034\x035\x035\x035\x035\x036\x036\x037\x037\x03" +
		"\x96\x02\x028\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07" +
		"\r\x02\b\x0F\x02\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E" +
		"\x1B\x02\x0F\x1D\x02\x10\x1F\x02\x11!\x02\x12#\x02\x13%\x02\x14\'\x02" +
		"\x15)\x02\x16+\x02\x17-\x02\x18/\x02\x191\x02\x1A3\x02\x1B5\x02\x1C7\x02" +
		"\x1D9\x02\x1E;\x02\x1F=\x02 ?\x02!A\x02\"C\x02#E\x02$G\x02%I\x02&K\x02" +
		"\'M\x02(O\x02)Q\x02*S\x02+U\x02,W\x02-Y\x02.[\x02/]\x020_\x021a\x022c" +
		"\x023e\x024g\x025i\x026k\x027m\x028\x03\x02\x05\x04\x02C\\c|\x06\x022" +
		";C\\aac|\x05\x02\v\f\x0F\x0F\"\"\x02\u011A\x02\x03\x03\x02\x02\x02\x02" +
		"\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02\x02\x02\x02" +
		"\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02\x02\x02\x11" +
		"\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02\x02\x02\x17" +
		"\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02\x02\x02\x1D" +
		"\x03\x02\x02\x02\x02\x1F\x03\x02\x02\x02\x02!\x03\x02\x02\x02\x02#\x03" +
		"\x02\x02\x02\x02%\x03\x02\x02\x02\x02\'\x03\x02\x02\x02\x02)\x03\x02\x02" +
		"\x02\x02+\x03\x02\x02\x02\x02-\x03\x02\x02\x02\x02/\x03\x02\x02\x02\x02" +
		"1\x03\x02\x02\x02\x023\x03\x02\x02\x02\x025\x03\x02\x02\x02\x027\x03\x02" +
		"\x02\x02\x029\x03\x02\x02\x02\x02;\x03\x02\x02\x02\x02=\x03\x02\x02\x02" +
		"\x02?\x03\x02\x02\x02\x02A\x03\x02\x02\x02\x02C\x03\x02\x02\x02\x02E\x03" +
		"\x02\x02\x02\x02G\x03\x02\x02\x02\x02I\x03\x02\x02\x02\x02K\x03\x02\x02" +
		"\x02\x02M\x03\x02\x02\x02\x02O\x03\x02\x02\x02\x02Q\x03\x02\x02\x02\x02" +
		"S\x03\x02\x02\x02\x02U\x03\x02\x02\x02\x02W\x03\x02\x02\x02\x02Y\x03\x02" +
		"\x02\x02\x02[\x03\x02\x02\x02\x02]\x03\x02\x02\x02\x02_\x03\x02\x02\x02" +
		"\x02a\x03\x02\x02\x02\x02c\x03\x02\x02\x02\x02e\x03\x02\x02\x02\x02g\x03" +
		"\x02\x02\x02\x02i\x03\x02\x02\x02\x02k\x03\x02\x02\x02\x02m\x03\x02\x02" +
		"\x02\x03o\x03\x02\x02\x02\x05s\x03\x02\x02\x02\x07v\x03\x02\x02\x02\t" +
		"{\x03\x02\x02\x02\v\x81\x03\x02\x02\x02\r\x86\x03\x02\x02\x02\x0F\x8E" +
		"\x03\x02\x02\x02\x11\x92\x03\x02\x02\x02\x13\x9C\x03\x02\x02\x02\x15\xA2" +
		"\x03\x02\x02\x02\x17\xA4\x03\x02\x02\x02\x19\xA6\x03\x02\x02\x02\x1B\xA8" +
		"\x03\x02\x02\x02\x1D\xAA\x03\x02\x02\x02\x1F\xAC\x03\x02\x02\x02!\xAE" +
		"\x03\x02\x02\x02#\xB0\x03\x02\x02\x02%\xB2\x03\x02\x02\x02\'\xB4\x03\x02" +
		"\x02\x02)\xB6\x03\x02\x02\x02+\xB8\x03\x02\x02\x02-\xBB\x03\x02\x02\x02" +
		"/\xBE\x03\x02\x02\x021\xC1\x03\x02\x02\x023\xC4\x03\x02\x02\x025\xC6\x03" +
		"\x02\x02\x027\xC8\x03\x02\x02\x029\xCA\x03\x02\x02\x02;\xCC\x03\x02\x02" +
		"\x02=\xCF\x03\x02\x02\x02?\xD2\x03\x02\x02\x02A\xD5\x03\x02\x02\x02C\xD8" +
		"\x03\x02\x02\x02E\xDB\x03\x02\x02\x02G\xDE\x03\x02\x02\x02I\xE1\x03\x02" +
		"\x02\x02K\xE4\x03\x02\x02\x02M\xE7\x03\x02\x02\x02O\xEB\x03\x02\x02\x02" +
		"Q\xEE\x03\x02\x02\x02S\xF0\x03\x02\x02\x02U\xF2\x03\x02\x02\x02W\xF4\x03" +
		"\x02\x02\x02Y\xF7\x03\x02\x02\x02[\xF9\x03\x02\x02\x02]\xFB\x03\x02\x02" +
		"\x02_\xFE\x03\x02\x02\x02a\u0101\x03\x02\x02\x02c\u0104\x03\x02\x02\x02" +
		"e\u0108\x03\x02\x02\x02g\u010C\x03\x02\x02\x02i\u010F\x03\x02\x02\x02" +
		"k\u0113\x03\x02\x02\x02m\u0115\x03\x02\x02\x02op\x07h\x02\x02pq\x07w\x02" +
		"\x02qr\x07p\x02\x02r\x04\x03\x02\x02\x02st\x07k\x02\x02tu\x07h\x02\x02" +
		"u\x06\x03\x02\x02\x02vw\x07g\x02\x02wx\x07n\x02\x02xy\x07u\x02\x02yz\x07" +
		"g\x02\x02z\b\x03\x02\x02\x02{|\x07y\x02\x02|}\x07j\x02\x02}~\x07k\x02" +
		"\x02~\x7F\x07n\x02\x02\x7F\x80\x07g\x02\x02\x80\n\x03\x02\x02\x02\x81" +
		"\x82\x07u\x02\x02\x82\x83\x07m\x02\x02\x83\x84\x07k\x02\x02\x84\x85\x07" +
		"r\x02\x02\x85\f\x03\x02\x02\x02\x86\x8A\t\x02\x02\x02\x87\x89\t\x03\x02" +
		"\x02\x88\x87\x03\x02\x02\x02\x89\x8C\x03\x02\x02\x02\x8A\x88\x03\x02\x02" +
		"\x02\x8A\x8B\x03\x02\x02\x02\x8B\x0E\x03\x02\x02\x02\x8C\x8A\x03\x02\x02" +
		"\x02\x8D\x8F\x042;\x02\x8E\x8D\x03\x02\x02\x02\x8F\x90\x03\x02\x02\x02" +
		"\x90\x8E\x03\x02\x02\x02\x90\x91\x03\x02\x02\x02\x91\x10\x03\x02\x02\x02" +
		"\x92\x96\x07$\x02\x02\x93\x95\v\x02\x02\x02\x94\x93\x03\x02\x02\x02\x95" +
		"\x98\x03\x02\x02\x02\x96\x97\x03\x02\x02\x02\x96\x94\x03\x02\x02\x02\x97" +
		"\x99\x03\x02\x02\x02\x98\x96\x03\x02\x02\x02\x99\x9A\x07$\x02\x02\x9A" +
		"\x12\x03\x02\x02\x02\x9B\x9D\t\x04\x02\x02\x9C\x9B\x03\x02\x02\x02\x9D" +
		"\x9E\x03\x02\x02\x02\x9E\x9C\x03\x02\x02\x02\x9E\x9F\x03\x02\x02\x02\x9F" +
		"\xA0\x03\x02\x02\x02\xA0\xA1\b\n\x02\x02\xA1\x14\x03\x02\x02\x02\xA2\xA3" +
		"\x07\x7F\x02\x02\xA3\x16\x03\x02\x02\x02\xA4\xA5\x07}\x02\x02\xA5\x18" +
		"\x03\x02\x02\x02\xA6\xA7\x07+\x02\x02\xA7\x1A\x03\x02\x02\x02\xA8\xA9" +
		"\x07*\x02\x02\xA9\x1C\x03\x02\x02\x02\xAA\xAB\x07.\x02\x02\xAB\x1E\x03" +
		"\x02\x02\x02\xAC\xAD\x070\x02\x02\xAD \x03\x02\x02\x02\xAE\xAF\x07,\x02" +
		"\x02\xAF\"\x03\x02\x02\x02\xB0\xB1\x07\'\x02\x02\xB1$\x03\x02\x02\x02" +
		"\xB2\xB3\x071\x02\x02\xB3&\x03\x02\x02\x02\xB4\xB5\x07-\x02\x02\xB5(\x03" +
		"\x02\x02\x02\xB6\xB7\x07/\x02\x02\xB7*\x03\x02\x02\x02\xB8\xB9\x07-\x02" +
		"\x02\xB9\xBA\x07-\x02\x02\xBA,\x03\x02\x02\x02\xBB\xBC\x07/\x02\x02\xBC" +
		"\xBD\x07/\x02\x02\xBD.\x03\x02\x02\x02\xBE\xBF\x07(\x02\x02\xBF\xC0\x07" +
		"(\x02\x02\xC00\x03\x02\x02\x02\xC1\xC2\x07~\x02\x02\xC2\xC3\x07~\x02\x02" +
		"\xC32\x03\x02\x02\x02\xC4\xC5\x07#\x02\x02\xC54\x03\x02\x02\x02\xC6\xC7" +
		"\x07<\x02\x02\xC76\x03\x02\x02\x02\xC8\xC9\x07=\x02\x02\xC98\x03\x02\x02" +
		"\x02\xCA\xCB\x07?\x02\x02\xCB:\x03\x02\x02\x02\xCC\xCD\x07-\x02\x02\xCD" +
		"\xCE\x07?\x02\x02\xCE<\x03\x02\x02\x02\xCF\xD0\x07/\x02\x02\xD0\xD1\x07" +
		"?\x02\x02\xD1>\x03\x02\x02\x02\xD2\xD3\x07,\x02\x02\xD3\xD4\x07?\x02\x02" +
		"\xD4@\x03\x02\x02\x02\xD5\xD6\x071\x02\x02\xD6\xD7\x07?\x02\x02\xD7B\x03" +
		"\x02\x02\x02\xD8\xD9\x07\'\x02\x02\xD9\xDA\x07?\x02\x02\xDAD\x03\x02\x02" +
		"\x02\xDB\xDC\x07/\x02\x02\xDC\xDD\x07@\x02\x02\xDDF\x03\x02\x02\x02\xDE" +
		"\xDF\x07?\x02\x02\xDF\xE0\x07@\x02\x02\xE0H\x03\x02\x02\x02\xE1\xE2\x07" +
		"0\x02\x02\xE2\xE3\x070\x02\x02\xE3J\x03\x02\x02\x02\xE4\xE5\x07<\x02\x02" +
		"\xE5\xE6\x07<\x02\x02\xE6L\x03\x02\x02\x02\xE7\xE8\x07A\x02\x02\xE8\xE9" +
		"\x07<\x02\x02\xE9\xEA\x07<\x02\x02\xEAN\x03\x02\x02\x02\xEB\xEC\x07=\x02" +
		"\x02\xEC\xED\x07=\x02\x02\xEDP\x03\x02\x02\x02\xEE\xEF\x07%\x02\x02\xEF" +
		"R\x03\x02\x02\x02\xF0\xF1\x07B\x02\x02\xF1T\x03\x02\x02\x02\xF2\xF3\x07" +
		"A\x02\x02\xF3V\x03\x02\x02\x02\xF4\xF5\x07A\x02\x02\xF5\xF6\x07<\x02\x02" +
		"\xF6X\x03\x02\x02\x02\xF7\xF8\x07>\x02\x02\xF8Z\x03\x02\x02\x02\xF9\xFA" +
		"\x07@\x02\x02\xFA\\\x03\x02\x02\x02\xFB\xFC\x07>\x02\x02\xFC\xFD\x07?" +
		"\x02\x02\xFD^\x03\x02\x02\x02\xFE\xFF\x07@\x02\x02\xFF\u0100\x07?\x02" +
		"\x02\u0100`\x03\x02\x02\x02\u0101\u0102\x07#\x02\x02\u0102\u0103\x07?" +
		"\x02\x02\u0103b\x03\x02\x02\x02\u0104\u0105\x07#\x02\x02\u0105\u0106\x07" +
		"?\x02\x02\u0106\u0107\x07?\x02\x02\u0107d\x03\x02\x02\x02\u0108\u0109" +
		"\x07c\x02\x02\u0109\u010A\x07u\x02\x02\u010A\u010B\x07A\x02\x02\u010B" +
		"f\x03\x02\x02\x02\u010C\u010D\x07?\x02\x02\u010D\u010E\x07?\x02\x02\u010E" +
		"h\x03\x02\x02\x02\u010F\u0110\x07?\x02\x02\u0110\u0111\x07?\x02\x02\u0111" +
		"\u0112\x07?\x02\x02\u0112j\x03\x02\x02\x02\u0113\u0114\x07)\x02\x02\u0114" +
		"l\x03\x02\x02\x02\u0115\u0116\x07`\x02\x02\u0116n\x03\x02\x02\x02\x07" +
		"\x02\x8A\x90\x96\x9E\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!LLexer.__ATN) {
			LLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(LLexer._serializedATN));
		}

		return LLexer.__ATN;
	}

}

